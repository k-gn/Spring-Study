spring:
#  h2:
#    console:
#      enabled: true # H2 Console 사용, h2 db 를 인 메모리(메모리에 데이터를 저장) db 로 로딩

# JPA는 기본적으로 어플리케이션에서 직접 JDBC 레벨의 SQL을 작성하지 않고 JPA가 직접 SQL을 작성하고 실행합니다.
# 그런데 DBMS 종류마다 사용하는 SQL이 다르다는 것을 우리는 앞에서 알아봤습니다.
# JPA가 해당 DBMS에 맞춰 SQL을 생성해야하는데 어떤 종류인지 알지 못한다면 문제가 발생 할 수 있습니다.
# JPA에 어떤 DBMS를 사용하는 알려주는 방법이 방언 설정이다.
# 이런 방언 설정은 datasource에 맞게 자동으로 바뀐다.
  datasource: # 직접 설정한 Dialect 사용 (default 는 h2)
    driver-class-name: org.mariadb.jdbc.Driver
    url: jdbc:mysql://localhost:3306/fcam?serverTimezone=Asia/Seoul
    username: fcam
    password: 1234
    initialization-mode: always # schema.sql, data.sql 을 로딩해서 실행 (embed : 임베디드 db 만 사용, 만약 실제 운영 및 배포시에는 NONE 을 해주는게 좋다.)
    # ddl-auto 보다 우선적

  jpa:
    show-sql: true # db에 날리는 sql을 보여준다.
    properties:
      hibernate:
        format_sql: true # 예쁘게 보기 위한 포매팅 설정
    generate-ddl: true # 자동으로 엔티티 테이블을 만들어준다.
    hibernate:
      ddl-auto: create-drop # 초기화 전략, generate-ddl 보다 우선적, schema.sql 을 쓸 경우 무시된다.
      # none: 아무것도 실행하지 않는다 (대부분의 DB에서 기본값이다)
      # create-drop: SessionFactory가 시작될 때 drop및 생성을 실행하고, SessionFactory가 종료될 때 drop을 실행한다 (in-memory DB의 경우 기본값이다)
      # create: SessionFactory가 시작될 때 데이터베이스 drop을 실행하고 생성된 DDL을 실행한다
      # update: 변경된 스키마를 적용한다
      # validate: 변경된 스키마가 있다면 변경점을 출력하고 애플리케이션을 종료한다

      # h2 같은 테스트 용 db 인 경우 true , create-drop 이지만, mysql, maria 같은 상용 db는 리스크가 있기 때문에 false, none을 기본값으로 해서 막아둠

server:
  port: 8070


# properties 보단 yml 을 사용하는 추세다.